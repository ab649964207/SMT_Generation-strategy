
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.2682833671569824
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 0.8976356983184814

N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.3411245346069336
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 0.9853029251098633

N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.28128767013549805
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 0.97908616065979

N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.3437075614929199
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 0.8279359340667725

misere rule
N-formula:	 Not(v0 + v1 == 2)
time cost:	 0.17012405395507812
strategies:	 []
time cost:	 0.5647437572479248

misere rule
N-formula:	 Not(v0 + v1 == 2)
time cost:	 0.2200026512145996
strategies:	 [(Not(2 <= v0 + v1), 'eat1', 0)]
time cost:	 0.7598216533660889

misere rule
N-formula:	 Or(Not(-1*v0 + v1 == -1),
   And(Not(-1*v0 + v1 == -1), Not((-1*v0 + v1)%4 == 3)))
time cost:	 102.62013602256775
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 0, v1%4 == 0), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 1, v1%4 == 3), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 2, v1%4 == 2), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 3, v1%4 == 1), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 0, v1%4 == 1), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 1, v1%4 == 0), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 2, v1%4 == 3), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 3, v1%4 == 2), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 0, v1%4 == 2), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 1, v1%4 == 1), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 2, v1%4 == 0), 'eat1', 2 + v1), (And(Not(-1 <= -1*v0 + v1), (3*v0)%4 == 3, v1%4 == 3), 'eat1', 2 + v1), (And(Not(-1*v0 + v1 <= -1), (3*v0)%4 == 0, v1%4 == 0), 'eat2', v0), (And(Not(-1*v0 + v1 <= -1), (3*v0)%4 == 1, v1%4 == 3), 'eat2', v0), (And(Not(-1*v0 + v1 <= -1), (3*v0)%4 == 2, v1%4 == 2), 'eat2', v0), (And(Not(-1*v0 + v1 <= -1), (3*v0)%4 == 3, v1%4 == 1), 'eat2', v0)]
time cost:	 116.51019477844238

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.36696910858154297
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.2652080059051514

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.38303065299987793
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.1388194561004639

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.3800323009490967
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.091027021408081

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 1.6831953525543213

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 1.8388290405273438

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 6.641859531402588
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0), (Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 8.399442195892334

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 4.747881889343262
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0), (Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 6.132922172546387

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 1.4897499084472656
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 2.065572738647461

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 8.732852935791016
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0), (Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 11.183919191360474

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.33499908447265625
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.0177428722381592

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.3126513957977295
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.0277228355407715

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.3939831256866455
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.2535901069641113

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 4.6085426807403564
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 5.061647891998291

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 1.011296033859253
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.4908862113952637

normal rule
N-formula:	 Not(-1*v0 + v1 == -1)
time cost:	 0.5072116851806641
strategies:	 [(Not(-1 <= -1*v0 + v1), 'eat1', 2 + v1), (Not(-1*v0 + v1 <= -1), 'eat2', v0)]
time cost:	 1.0834674835205078

misere rule
N-formula:	 Not(v0 + v1 == 2)
time cost:	 0.2113664150238037
strategies:	 [(Not(2 <= v0 + v1), 'eat1', 0)]
time cost:	 0.5474045276641846
